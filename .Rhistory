sprwMean <- mean(vector)
}
sprwRange <- max(vector) - min(vector)
sprwQuart <- summary(vector)
sprwVar <- var(vector)
sprwSD <- sd(vector)
sprwCat <- if(sprwNA > 0) {
cat("# of NAs = ", sprwNA, "\nMean = ", sprwMean, "\nRange =", sprwRange, "\nQuartiles = \n   Min: ", sprwQuart[1], "\n   1st: ", sprwQuart[2], "\n   Median: ", sprwQuart[3], "\n   Mean: ", sprwQuart[4], "\n   3rd: ", sprwQuart[5], "\n   Max: ", sprwQuart[6], "\nVariance = ", sprwVar, "\nStandard Dev. =", sprwSD, "\n\n*** To remove NA values, NA replaced in vector with mean excluding NAs.\n")
} else {
cat("# of NAs =", sprwNA, "\nMean = ", sprwMean, "\nRange =", sprwRange, "\nQuartiles = \n   Min: ", sprwQuart[1], "\n   1st: ", sprwQuart[2], "\n   Median: ", sprwQuart[3], "\n   Mean: ", sprwQuart[4], "\n   3rd: ", sprwQuart[5], "\n   Max: ", sprwQuart[6], "\nVariance = ", sprwVar, "\nStandard Dev. =", sprwSD, "\n")
}
}
sparrow(v1)
sparrow(v2)
v1 <- c(2,3,NA,4,5,6,NA,NA,7,8,9,10,NA)
v2 <- c(1,1,1,1,1,2,3,4,5,6,7,8,9)
v3 <- runif(20, min = 0, max = 50)
sparrow <- function(vector) {
sprwNaIf <- if(sum(is.na(vector)) > 0) {
sprwNA <- sum(is.na(vector))
} else {
sprwNA <- 0
}
sprwMeanIf <- if(sprwNA > 0) {
sprwMeanNA <- mean(vector, na.rm = TRUE)
vector[is.na(vector)] <- sprwMeanNA
vector <- sort(vector)
sprwMean <- mean(vector)
} else {
sprwMean <- mean(vector)
}
sprwRange <- max(vector) - min(vector)
sprwQuart <- summary(vector)
sprwVar <- var(vector)
sprwSD <- sd(vector)
sprwCat <- if(sprwNA > 0) {
cat("# of NAs = ", sprwNA, "\nMean = ", sprwMean, "\nRange =", sprwRange, "\nQuartiles = \n   Min: ", sprwQuart[1], "\n   1st: ", sprwQuart[2], "\n   Median: ", sprwQuart[3], "\n   Mean: ", sprwQuart[4], "\n   3rd: ", sprwQuart[5], "\n   Max: ", sprwQuart[6], "\nVariance = ", sprwVar, "\nStandard Dev. =", sprwSD, "\n\n*** To remove NA values, NA replaced in vector with mean excluding NAs.\n")
} else {
cat("# of NAs =", sprwNA, "\nMean = ", sprwMean, "\nRange =", sprwRange, "\nQuartiles = \n   Min: ", sprwQuart[1], "\n   1st: ", sprwQuart[2], "\n   Median: ", sprwQuart[3], "\n   Mean: ", sprwQuart[4], "\n   3rd: ", sprwQuart[5], "\n   Max: ", sprwQuart[6], "\nVariance = ", sprwVar, "\nStandard Dev. =", sprwSD, "\n")
}
}
sparrow(v1)
sparrow(v2)
sparrow(v3)
sparrow <- function(vector) {
sprwNaIf <- if(sum(is.na(vector)) > 0) {
sprwNA <- sum(is.na(vector))
} else {
sprwNA <- 0
}
sprwMeanIf <- if(sprwNA > 0) {
sprwMeanNA <- mean(vector, na.rm = TRUE)
vector[is.na(vector)] <- sprwMeanNA
vector <- sort(vector)
sprwMean <- mean(vector)
} else {
sprwMean <- mean(vector)
}
sprwRange <- max(vector) - min(vector)
sprwQuart <- summary(vector)
sprwVar <- var(vector)
sprwSD <- sd(vector)
sprwCat <- if(sprwNA > 0) {
cat("# of NAs = ", sprwNA, "\nMean = ", sprwMean, "\nRange =", sprwRange, "\nQuartiles = \n   Min: ", sprwQuart[1], "\n   1st: ", sprwQuart[2], "\n   Median: ", sprwQuart[3], "\n   3rd: ", sprwQuart[5], "\n   Max: ", sprwQuart[6], "\nVariance = ", sprwVar, "\nStandard Dev. =", sprwSD, "\n\n*** To remove NA values, NA replaced in vector with mean excluding NAs.\n")
} else {
cat("# of NAs =", sprwNA, "\nMean = ", sprwMean, "\nRange =", sprwRange, "\nQuartiles = \n   Min: ", sprwQuart[1], "\n   1st: ", sprwQuart[2], "\n   Median: ", sprwQuart[3], "\n   3rd: ", sprwQuart[5], "\n   Max: ", sprwQuart[6], "\nVariance = ", sprwVar, "\nStandard Dev. =", sprwSD, "\n")
}
}
sparrow(v1)
sparrow(v2)
sparrow(v3)
v3 <- runif(20, min = 0, max = 25)
sparrow <- function(vector) {
sprwNaIf <- if(sum(is.na(vector)) > 0) {
sprwNA <- sum(is.na(vector))
} else {
sprwNA <- 0
}
sprwMeanIf <- if(sprwNA > 0) {
sprwMeanNA <- mean(vector, na.rm = TRUE)
vector[is.na(vector)] <- sprwMeanNA
vector <- sort(vector)
sprwMean <- mean(vector)
} else {
sprwMean <- mean(vector)
}
sprwRange <- max(vector) - min(vector)
sprwQuart <- summary(vector)
sprwVar <- var(vector)
sprwSD <- sd(vector)
sprwCat <- if(sprwNA > 0) {
cat("# of NAs = ", sprwNA, "\nMean = ", sprwMean, "\nRange =", sprwRange, "\nQuartiles = \n   Min: ", sprwQuart[1], "\n   1st: ", sprwQuart[2], "\n   Median: ", sprwQuart[3], "\n   3rd: ", sprwQuart[5], "\n   Max: ", sprwQuart[6], "\nVariance = ", sprwVar, "\nStandard Dev. =", sprwSD, "\n\n*** To remove NA values, NA replaced in vector with mean excluding NAs.\n")
} else {
cat("# of NAs =", sprwNA, "\nMean = ", sprwMean, "\nRange =", sprwRange, "\nQuartiles = \n   Min: ", sprwQuart[1], "\n   1st: ", sprwQuart[2], "\n   Median: ", sprwQuart[3], "\n   3rd: ", sprwQuart[5], "\n   Max: ", sprwQuart[6], "\nVariance = ", sprwVar, "\nStandard Dev. =", sprwSD, "\n")
}
}
sparrow(v1)
sparrow(v2)
sparrow(v3)
v3 <- runif(15, min = 5, max = 25)
sparrow(v3)
sparrowhawk <- function(sampleMean, size, sdev, interval){
hawkDF <- size - 1
hawkCV <- round(qt((interval+(1-interval)/2), hawkDF), 3)
hawkSEM <- sdev / sqrt(size)
hawkIntMinus <- sampleMean - (hawkCV * hawkSEM)
hawkIntPlus <- sampleMean + (hawkCV * hawkSEM)
cat("Degrees of Freedom = ", hawkDF, "\nCritical Value = ", hawkCV, "\nStandard Error of the Mean = ", hawkSEM, "\nConfidence Interval = " hawkIntMinus, "-", hawkIntPlus, "\n\nWith ", (sdev*100), "% confidence, the population mean is between ", hawkIntMinus, " and ", hawkIntPlus, ".\n")
}
sparrowhawk <- function(sampleMean, size, sdev, interval){
hawkDF <- size - 1
hawkCV <- round(qt((interval+(1-interval)/2), hawkDF), 3)
hawkSEM <- sdev / sqrt(size)
hawkIntMinus <- sampleMean - (hawkCV * hawkSEM)
hawkIntPlus <- sampleMean + (hawkCV * hawkSEM)
cat("Degrees of Freedom = ", hawkDF, "\nCritical Value = ", hawkCV, "\nStandard Error of the Mean = ", hawkSEM, "\nConfidence Interval = " hawkIntMinus, "-", hawkIntPlus, "\n\nWith ", (sdev*100), "% confidence, the population mean is between ", hawkIntMinus, " and ", hawkIntPlus, ".\n")
}
sparrowhawk <- function(sampleMean, size, sdev, interval){
hawkDF <- size - 1
hawkCV <- round(qt((interval+(1-interval)/2), hawkDF), 3)
hawkSEM <- sdev / sqrt(size)
hawkIntMinus <- sampleMean - (hawkCV * hawkSEM)
hawkIntPlus <- sampleMean + (hawkCV * hawkSEM)
cat("Degrees of Freedom = ", hawkDF, "\nCritical Value = ", hawkCV, "\nStandard Error of the Mean = ", hawkSEM, "\nConfidence Interval = ", hawkIntMinus, "-", hawkIntPlus, "\n\nWith ", (sdev*100), "% confidence, the population mean is between ", hawkIntMinus, " and ", hawkIntPlus, ".\n")
}
sparrowhawk(200, 50, 20, .95)
sparrowhawk <- function(sampleMean, size, sdev, interval){
hawkDF <- size - 1
hawkCV <- round(qt((interval+(1-interval)/2), hawkDF), 3)
hawkSEM <- sdev / sqrt(size)
hawkIntMinus <- sampleMean - (hawkCV * hawkSEM)
hawkIntPlus <- sampleMean + (hawkCV * hawkSEM)
cat("Degrees of Freedom = ", hawkDF, "\nCritical Value = ", hawkCV, "\nStandard Error of the Mean = ", hawkSEM, "\nConfidence Interval = ", hawkIntMinus, "-", hawkIntPlus, "\n\nWith ", (intreval*100), "% confidence, the population mean is between ", hawkIntMinus, " and ", hawkIntPlus, ".\n")
}
sparrowhawk(200, 50, 20, .95)
sparrowhawk <- function(sampleMean, size, sdev, interval){
hawkDF <- size - 1
hawkCV <- round(qt((interval+(1-interval)/2), hawkDF), 3)
hawkSEM <- sdev / sqrt(size)
hawkIntMinus <- sampleMean - (hawkCV * hawkSEM)
hawkIntPlus <- sampleMean + (hawkCV * hawkSEM)
cat("Degrees of Freedom = ", hawkDF, "\nCritical Value = ", hawkCV, "\nStandard Error of the Mean = ", hawkSEM, "\nConfidence Interval = ", hawkIntMinus, "-", hawkIntPlus, "\n\nWith ", (interval*100), "% confidence, the population mean is between ", hawkIntMinus, " and ", hawkIntPlus, ".\n")
}
sparrowhawk(200, 50, 20, .95)
sparrow <- function(vector) {
sprwNaIf <- if(sum(is.na(vector)) > 0) {
sprwNA <- sum(is.na(vector))
} else {
sprwNA <- 0
}
sprwMeanIf <- if(sprwNA > 0) {
sprwMeanNA <- mean(vector, na.rm = TRUE)
vector[is.na(vector)] <- sprwMeanNA
vector <- sort(vector)
sprwMean <- mean(vector)
} else {
sprwMean <- mean(vector)
}
sprwRange <- max(vector) - min(vector)
sprwQuart <- summary(vector)
sprwVar <- var(vector)
sprwSD <- sd(vector)
sprwCat <- if(sprwNA > 0) {
cat("# of NAs = ", sprwNA, "\nMean =", sprwMean, "\nRange =", sprwRange, "\nQuartiles =\n   Min:", sprwQuart[1], "\n   1st:", sprwQuart[2], "\n   Median:", sprwQuart[3], "\n   3rd:", sprwQuart[5], "\n   Max:", sprwQuart[6], "\nVariance =", sprwVar, "\nStandard Dev. =", sprwSD, "\n\n*** To remove NA values, NA replaced in vector with mean excluding NAs.\n")
} else {
cat("# of NAs =", sprwNA, "\nMean =", sprwMean, "\nRange =", sprwRange, "\nQuartiles =\n   Min:", sprwQuart[1], "\n   1st:", sprwQuart[2], "\n   Median:", sprwQuart[3], "\n   3rd:", sprwQuart[5], "\n   Max:", sprwQuart[6], "\nVariance =", sprwVar, "\nStandard Dev. =", sprwSD, "\n")
}
}
sparrow(v1)
sparrow(v2)
sparrow(v3)
sparrow(v1)
sparrow <- function(vector) {
sprwNaIf <- if(sum(is.na(vector)) > 0) {
sprwNA <- sum(is.na(vector))
} else {
sprwNA <- 0
}
sprwMeanIf <- if(sprwNA > 0) {
sprwMeanNA <- mean(vector, na.rm = TRUE)
vector[is.na(vector)] <- sprwMeanNA
vector <- sort(vector)
sprwMean <- mean(vector)
} else {
sprwMean <- mean(vector)
}
sprwRange <- max(vector) - min(vector)
sprwQuart <- summary(vector)
sprwVar <- var(vector)
sprwSD <- sd(vector)
sprwCat <- if(sprwNA > 0) {
cat("# of NAs =", sprwNA, "\nMean =", sprwMean, "\nRange =", sprwRange, "\nQuartiles =\n   Min:", sprwQuart[1], "\n   1st:", sprwQuart[2], "\n   Median:", sprwQuart[3], "\n   3rd:", sprwQuart[5], "\n   Max:", sprwQuart[6], "\nVariance =", sprwVar, "\nStandard Dev. =", sprwSD, "\n\n*** To remove NA values, NA replaced in vector with mean excluding NAs.\n")
} else {
cat("# of NAs =", sprwNA, "\nMean =", sprwMean, "\nRange =", sprwRange, "\nQuartiles =\n   Min:", sprwQuart[1], "\n   1st:", sprwQuart[2], "\n   Median:", sprwQuart[3], "\n   3rd:", sprwQuart[5], "\n   Max:", sprwQuart[6], "\nVariance =", sprwVar, "\nStandard Dev. =", sprwSD, "\n")
}
}
sparrow(v1)
sparrow(v2)
sparrow(v3)
sparrowhawk <- function(sampleMean, size, sdev, interval){
hawkDF <- size - 1
hawkCV <- round(qt((interval+(1-interval)/2), hawkDF), 3)
hawkSEM <- sdev / sqrt(size)
hawkIntMinus <- sampleMean - (hawkCV * hawkSEM)
hawkIntPlus <- sampleMean + (hawkCV * hawkSEM)
cat("Degrees of Freedom =", hawkDF, "\nCritical Value =", hawkCV, "\nStandard Error of the Mean =", hawkSEM, "\nConfidence Interval =", hawkIntMinus, "-", hawkIntPlus, "\n\nWith", (interval*100), "% confidence, the population mean is between", hawkIntMinus, "and", hawkIntPlus, ".\n")
}
sparrowhawk(200, 50, 20, .95)
sparrowhawk(1225, 145, 100, .99)
sparrowhawk(3, 100, .25, .9)
sparrowhawk(3, 100, .25, .99)
sparrowhawk(3, 200, .25, .9)
v3 <- runif(50, min = 5, max = 25)
sparrow <- function(vector) {
sprwNaIf <- if(sum(is.na(vector)) > 0) {
sprwNA <- sum(is.na(vector))
} else {
sprwNA <- 0
}
sprwMeanIf <- if(sprwNA > 0) {
sprwMeanNA <- mean(vector, na.rm = TRUE)
vector[is.na(vector)] <- sprwMeanNA
vector <- sort(vector)
sprwMean <- mean(vector)
} else {
sprwMean <- mean(vector)
}
sprwRange <- max(vector) - min(vector)
sprwQuart <- summary(vector)
sprwVar <- var(vector)
sprwSD <- sd(vector)
sprwCat <- if(sprwNA > 0) {
cat("# of NAs =", sprwNA, "\nMean =", sprwMean, "\nRange =", sprwRange, "\nQuartiles =\n   Min:", sprwQuart[1], "\n   1st:", sprwQuart[2], "\n   Median:", sprwQuart[3], "\n   3rd:", sprwQuart[5], "\n   Max:", sprwQuart[6], "\nVariance =", sprwVar, "\nStandard Dev. =", sprwSD, "\n\n*** To remove NA values, NA replaced in vector with mean excluding NAs.\n")
} else {
cat("# of NAs =", sprwNA, "\nMean =", sprwMean, "\nRange =", sprwRange, "\nQuartiles =\n   Min:", sprwQuart[1], "\n   1st:", sprwQuart[2], "\n   Median:", sprwQuart[3], "\n   3rd:", sprwQuart[5], "\n   Max:", sprwQuart[6], "\nVariance =", sprwVar, "\nStandard Dev. =", sprwSD, "\n")
}
}
sparrow(v3)
sparrowhype <- function(popMean, sampleMean, sdev, slvl, size){
hypeInt <- 1 - slvl
hypeCV <- round(qt((hypeInt + (1 - hypeInt) / 2), size - 1), 3)
hypeZScore <- (sampleMean - popMean) / (sdev / sqrt(size))
hypePValue <- round(2 * pnorm(-abs(hypeZScore)), 5)
hypeCat1 <- if(hypeZScore > 0 & hypeZScore > hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else if (hypeZScore < 0 & hypeZScore < hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is inside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we would fail to reject the null hypothesis.")
}
}
sparrowhype(100, 100.25, 1, .05, 250)
sparrowhype <- function(popMean, sampleMean, sdev, slvl, size){
hypeInt <- 1 - slvl
hypeCV <- round(qt((hypeInt + (1 - hypeInt) / 2), size - 1), 3)
hypeZScore <- (sampleMean - popMean) / (sdev / sqrt(size))
hypePValue <- round(2 * pnorm(-abs(hypeZScore)), 3)
hypeCat1 <- if(hypeZScore > 0 & hypeZScore > hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else if (hypeZScore < 0 & hypeZScore < hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is inside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we would fail to reject the null hypothesis.")
}
}
sparrowhype(100, 100.25, 1, .05, 250)
sparrowhype <- function(popMean, sampleMean, sdev, slvl, size){
hypeInt <- 1 - slvl
hypeCV <- round(qt((hypeInt + (1 - hypeInt) / 2), size - 1), 3)
hypeZScore <- (sampleMean - popMean) / (sdev / sqrt(size))
hypePValue <- round(2 * pnorm(-abs(hypeZScore)), 4)
hypeCat1 <- if(hypeZScore > 0 & hypeZScore > hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else if (hypeZScore < 0 & hypeZScore < hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is inside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we would fail to reject the null hypothesis.")
}
}
sparrowhype(100, 100.25, 1, .05, 250)
sparrowhype <- function(popMean, sampleMean, sdev, slvl, size){
hypeInt <- 1 - slvl
hypeCV <- round(qt((hypeInt + (1 - hypeInt) / 2), size - 1), 3)
hypeZScore <- (sampleMean - popMean) / (sdev / sqrt(size))
hypePValue <- round(2 * pnorm(-abs(hypeZScore)), 6)
hypeCat1 <- if(hypeZScore > 0 & hypeZScore > hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else if (hypeZScore < 0 & hypeZScore < hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is inside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we would fail to reject the null hypothesis.")
}
}
sparrowhype(100, 100.25, 1, .05, 250)
sparrowhype <- function(popMean, sampleMean, sdev, slvl, size){
hypeInt <- 1 - slvl
hypeCV <- round(qt((hypeInt + (1 - hypeInt) / 2), size - 1), 3)
hypeZScore <- (sampleMean - popMean) / (sdev / sqrt(size))
hypePValue <- round(2 * pnorm(-abs(hypeZScore)), 5)
hypeCat1 <- if(hypeZScore > 0 & hypeZScore > hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else if (hypeZScore < 0 & hypeZScore < hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is inside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we would fail to reject the null hypothesis.")
}
}
sparrowhype(100, 100.25, 1, .05, 250)
sparrowhype(50, 49, 1.25, .01, 100)
sparrowhype(50, 49, .25, .01, 100)
sparrowhype(125, 126, .5, .1, 250)
sparrowhype(125, 126, 5, .1, 250)
sparrowhype(125, 126, 5, .01, 250)
sparrowhype(125, 126, 25, .01, 250)
sparrowhype(200, 203, 25, .05, 140)
sparrowhype(100, 100.25, 1, .05, 250)
sparrowhype(50, 49, 1.25, .01, 100)
sparrowhype(50, 49, 2, .01, 100)
sparrowhype(200, 203, 25, .05, 140)
sparrowhype <- function(popMean, sampleMean, sdev, slvl, size){
hypeInt <- 1 - slvl
hypeCV <- round(qt((hypeInt + (1 - hypeInt) / 2), size - 1), 3)
hypeZScore <- (sampleMean - popMean) / (sdev / sqrt(size))
hypePValue <- round(2 * pnorm(-abs(hypeZScore)), 6)
hypeCat1 <- if(hypeZScore > 0 & hypeZScore > hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else if (hypeZScore < 0 & hypeZScore < hypeCV) {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is outside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we should reject the null hypothesis.")
} else {
cat("Null: Population Mean ==", popMean, "\nAlternative: Population Mean !=", popMean, "\nConfidence Interval =", hypeInt, "\nCritical Value =", hypeCV, "\nZ-Score =", hypeZScore, "\nP-Value =", hypePValue, "\n\nThe Z-Score", hypeZScore, "is inside the range of", -abs(hypeCV), "and", abs(hypeCV), "and we would fail to reject the null hypothesis.")
}
}
sparrowhype(100, 100.25, 1, .05, 250)
sparrowhype(50, 49, 2, .01, 100)
sparrowhype(200, 203, 25, .05, 140)
sparrowhawk <- function(sampleMean, size, sdev, interval) {
hawkDF <- size - 1
hawkCV <- round(qt((interval + (1 - interval) / 2), hawkDF), 3)
hawkSEM <- sdev / sqrt(size)
hawkIntMinus <- sampleMean - (hawkCV * hawkSEM)
hawkIntPlus <- sampleMean + (hawkCV * hawkSEM)
cat("Degrees of Freedom =", hawkDF, "\nCritical Value =", hawkCV, "\nStandard Error of the Mean =", hawkSEM, "\nConfidence Interval =", hawkIntMinus, "-", hawkIntPlus, "\n\nWith", (interval*100), "% confidence, the population mean is between", hawkIntMinus, "and", hawkIntPlus, ".\n")
}
sparrowhawk(200, 50, 20, .95)
sparrowhawk(1225, 145, 100, .99)
sparrowhawk(3, 100, .25, .9)
sparrowhawk(3, 100, .25, .99)
sparrowhawk(3, 200, .25, .9)
sparrowhawk <- function(sampleMean, size, sdev, interval) {
hawkDF <- size - 1
hawkCV <- round(qt((interval + (1 - interval) / 2), hawkDF), 3)
hawkSEM <- sdev / sqrt(size)
hawkIntMinus <- sampleMean - (hawkCV * hawkSEM)
hawkIntPlus <- sampleMean + (hawkCV * hawkSEM)
cat("Degrees of Freedom =", hawkDF, "\nCritical Value =", hawkCV, "\nStandard Error of the Mean =", hawkSEM, "\nConfidence Interval =", hawkIntMinus, "-", hawkIntPlus, "\n\nWith", (interval*100), "% confidence, the population mean is between", hawkIntMinus, "and", hawkIntPlus, ".\n")
}
sparrowhawk(200, 50, 20, .95)
sparrowhawk(1225, 145, 100, .99)
sparrowhawk(3, 100, .25, .9)
sparrowhawk(3, 100, .25, .99)
sparrowhawk(3, 200, .25, .9)
v3na <- c(2,4,11,19,33,46)
v4 <- v3[v3na] = NA
v4 <- v3[v3na] = NA
v3[v3na] = NA
v1 <- c(2,3,NA,4,5,6,NA,NA,7,8,9,10,NA)
v2 <- c(1,1,1,1,1,2,3,4,5,6,7,8,9)
v3 <- runif(50, min = 5, max = 25)
v3na <- c(2,4,11,19,33,46)
v3[v3na] = NA
v4 <- runif(25, min = 2, max = 12)
sparrow <- function(vector) {
sprwNaIf <- if(sum(is.na(vector)) > 0) {
sprwNA <- sum(is.na(vector))
} else {
sprwNA <- 0
}
sprwMeanIf <- if(sprwNA > 0) {
sprwMeanNA <- mean(vector, na.rm = TRUE)
vector[is.na(vector)] <- sprwMeanNA
vector <- sort(vector)
sprwMean <- mean(vector)
} else {
sprwMean <- mean(vector)
}
sprwRange <- max(vector) - min(vector)
sprwQuart <- summary(vector)
sprwVar <- var(vector)
sprwSD <- sd(vector)
sprwCat <- if(sprwNA > 0) {
cat("# of NAs =", sprwNA, "\nMean =", sprwMean, "\nRange =", sprwRange, "\nQuartiles =\n   Min:", sprwQuart[1], "\n   1st:", sprwQuart[2], "\n   Median:", sprwQuart[3], "\n   3rd:", sprwQuart[5], "\n   Max:", sprwQuart[6], "\nVariance =", sprwVar, "\nStandard Dev. =", sprwSD, "\n\n*** To remove NA values, NA replaced in vector with mean excluding NAs.\n")
} else {
cat("# of NAs =", sprwNA, "\nMean =", sprwMean, "\nRange =", sprwRange, "\nQuartiles =\n   Min:", sprwQuart[1], "\n   1st:", sprwQuart[2], "\n   Median:", sprwQuart[3], "\n   3rd:", sprwQuart[5], "\n   Max:", sprwQuart[6], "\nVariance =", sprwVar, "\nStandard Dev. =", sprwSD, "\n")
}
}
sparrow(v1)
sparrow(v2)
sparrow(v3)
sparrow(v4)
library(roxygen2)
library(devtools)
install.packages("Rtools")
library(Rtools)
library(Rtools35)
?sparrow
??sparrow
?sparrow
?sparrow
sparrowhype(100, 100.25, 1, .05, 250)
getwd()
baseDF <- read.csv("GlobalLandTemperaturesByMajorCity.csv")
getwd()
baseDF <- read.csv("GlobalLandTemperaturesByMajorCity.csv")
str(baseDF)
levels(baseDF$City)
london <- baseDF %>%
filter(baseDF$City == "London")
str(london)
london <- london[-1:-674,]
london <- london[-2557:-2665,]
london <- london[,-3:-7]
sum(is.na(london$AverageTemperature))
row.names(london) <- NULL
london$dt <- as.Date(london$dt)
names(london)[1] <- "date"
names(london)[2] <- "avgTemp"
head(london)
tail(london)
londonYear <- aggregate(list(avgTemp = london$avgTemp),
list(year = cut(london$date, "1 year")), mean)
londonYear$year <- as.Date(londonYear$year)
londonYear$value <- format(londonYear$year, format = "%Y")
londonYear <- londonYear[, c(3,1,2)]
londonYear$roll <- rollmean(londonYear$avgTemp, 10, na.pad = TRUE)
str(londonYear)
library(tidyverse)
baseDF <- read.csv("GlobalLandTemperaturesByMajorCity.csv")
str(baseDF)
levels(baseDF$City)
london <- baseDF %>%
filter(baseDF$City == "London")
str(london)
london <- london[-1:-674,]
london <- london[-2557:-2665,]
london <- london[,-3:-7]
sum(is.na(london$AverageTemperature))
row.names(london) <- NULL
london$dt <- as.Date(london$dt)
names(london)[1] <- "date"
names(london)[2] <- "avgTemp"
head(london)
tail(london)
londonYear <- aggregate(list(avgTemp = london$avgTemp),
list(year = cut(london$date, "1 year")), mean)
londonYear$year <- as.Date(londonYear$year)
londonYear$value <- format(londonYear$year, format = "%Y")
londonYear <- londonYear[, c(3,1,2)]
londonYear$roll <- rollmean(londonYear$avgTemp, 10, na.pad = TRUE)
str(londonYear)
rm(baseDF)
rm(london)
londonYear
baseDF <- read.csv("GlobalLandTemperaturesByMajorCity.csv")
str(baseDF)
levels(baseDF$City)
london <- baseDF %>%
filter(baseDF$City == "London")
str(london)
london <- london[-1:-674,]
london <- london[-2557:-2665,]
london <- london[,-3:-7]
sum(is.na(london$AverageTemperature))
row.names(london) <- NULL
london$dt <- as.Date(london$dt)
names(london)[1] <- "date"
names(london)[2] <- "avgTemp"
head(london)
tail(london)
londonYear <- aggregate(list(avgTemp = london$avgTemp),
list(year = cut(london$date, "1 year")), mean)
londonYear$year <- as.Date(londonYear$year)
str(londonYear)
rm(baseDF)
rm(london)
devtools::use_data(londonYear)
usethis::use_data(londonYear)
devtools::check()
devtools::check()
getwd()
.Last.error.trace
getwd()
devtools::check()
getwd()
devtools::check()
devtools::check()
library(sparrow)
devtools::check()
devtools::check()
library(sparrow)
devtools::check()
devtools::check()
library(sparrow)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(sparrow)
devtools::check()
devtools::check()
library(sparrow)
devtools::check()
devtools::check()
